(module
  (rec
    (type (;0;) (func (result i64)))
    (type (;1;) (sub (func (result f32))))
    (type (;2;) (struct (field (mut f64)) (field (mut i8)) (field i8) (field (mut i16)) (field (mut i8)) (field i8) (field (mut i16)) (field i16)))
    (type (;3;) (struct))
    (type (;4;) (sub (func)))
    (type (;5;) (array (mut i16)))
    (type (;6;) (func (result i64 f64)))
    (type (;7;) (array f32))
    (type (;8;) (struct (field (mut i16)) (field (mut i8)) (field f64) (field externref) (field i16) (field (mut i16)) (field f64)))
    (type (;9;) (sub (array (mut i8))))
    (type (;10;) (func (result f32 f64 f64)))
    (type (;11;) (array i16))
    (type (;12;) (sub 4 (func)))
    (type (;13;) (sub (struct (field f32) (field i16))))
    (type (;14;) (array (mut i16)))
    (type (;15;) (array i16))
    (type (;16;) (array i16))
    (type (;17;) (func (param f32 i64 f32) (result i64)))
    (type (;18;) (func (param f32)))
    (type (;19;) (array (mut i32)))
    (type (;20;) (sub (func (result f64 nullfuncref f64 f64 f64))))
    (type (;21;) (struct (field i16) (field i16) (field (ref null 4)) (field i16)))
    (type (;22;) (sub (func (param i64 i32) (result f32 f32 i32))))
    (type (;23;) (array i16))
    (type (;24;) (func (result i32)))
    (type (;25;) (struct (field i16) (field (mut i32)) (field (mut f32)) (field (mut i16)) (field (mut f32)) (field i32) (field (mut f32)) (field i8) (field (mut i16)) (field (mut i16)) (field (mut i64)) (field (mut i8)) (field i32) (field (mut i32))))
    (type (;26;) (struct (field (mut i64)) (field (mut i64)) (field (mut i64)) (field i16) (field (mut i64)) (field (mut i64)) (field i8) (field (mut i32)) (field (mut i16)) (field i32) (field f32) (field f64) (field i8)))
    (type (;27;) (func (param i32 f32) (result f64 f32 i32)))
    (type (;28;) (func (param eqref) (result f64 i64)))
    (type (;29;) (struct (field f64) (field (mut i16)) (field (mut i8)) (field i32) (field (mut i16)) (field i64) (field (mut f64)) (field (mut f64)) (field (mut f64)) (field f32)))
    (type (;30;) (array f32))
    (type (;31;) (array (mut i64)))
    (type (;32;) (sub (struct (field i8) (field (mut f32)) (field i8) (field (mut i16)) (field i16) (field (mut i8)) (field i8) (field i8) (field i64) (field i16) (field (mut i16)) (field i8) (field (mut i64)) (field i8) (field (mut i8)))))
    (type (;33;) (sub (struct (field i16) (field (mut i16)) (field i8) (field (mut i8)) (field (mut i8)) (field i16) (field i8) (field i16) (field (mut i16)) (field i8))))
    (type (;34;) (array (mut i16)))
    (type (;35;) (sub (struct (field (mut (ref null 34))) (field (mut i16)) (field (mut i16)) (field i64) (field f64) (field (mut funcref)) (field i64) (field (mut i16)) (field i8) (field (mut arrayref)) (field i16) (field i8) (field (mut f64)) (field i16))))
    (type (;36;) (array (mut i16)))
    (type (;37;) (func (result f32 exnref)))
    (type (;38;) (func))
    (type (;39;) (struct (field i64) (field i32) (field (mut i8)) (field i8) (field (mut i16)) (field (mut i16)) (field (mut i31ref)) (field f32) (field i32) (field i16) (field i16) (field i16) (field i8) (field i8) (field i8) (field i16) (field (mut i16)) (field (mut i16)) (field i8)))
    (type (;40;) (sub (array (mut nullref))))
    (type (;41;) (struct (field (mut f32)) (field nullref) (field (mut f32)) (field (mut i8)) (field (mut nullfuncref)) (field (mut i8))))
    (type (;42;) (sub (struct (field i8) (field (ref null 30)) (field (mut i32)) (field (mut i16)) (field i16) (field i32) (field i16) (field i16) (field (mut i8)) (field i8) (field i16) (field i8) (field i8))))
    (type (;43;) (sub (array (mut i16))))
    (type (;44;) (sub (struct (field (mut i8)) (field i64) (field i8) (field f64) (field i16) (field (mut i64)) (field (mut i8)) (field i16) (field (mut i8)) (field i64) (field (mut i8)) (field (mut i16)))))
    (type (;45;) (array (mut i16)))
    (type (;46;) (struct (field i16) (field f64) (field i16) (field i64) (field i16) (field f64) (field (mut f32)) (field f64) (field (mut i16)) (field (mut i32)) (field (ref null 25)) (field (mut f32)) (field (mut i8)) (field (mut i16)) (field (mut i16)) (field (mut i8)) (field (mut i8)) (field f32) (field (mut i32)) (field (mut i16))))
    (type (;47;) (sub (func (param i32 i32))))
    (type (;48;) (sub (struct (field (mut i8)) (field (mut i8)) (field (mut i64)) (field (mut i16)) (field (mut i8)) (field (mut i8)) (field i16) (field (mut i16)))))
    (type (;49;) (sub (array (mut i8))))
  )
  (import "\u{6}" "" (tag (;0;) (type 38)))
  (memory (;0;) 0 2594 shared)
  (tag (;1;) (type 47) (param i32 i32))
  (export " " (func 0))
  (elem (;0;) declare i31ref (ref.null i31) (ref.null i31))
  (func (;0;) (type 38)
    i64.const -4908782903412333600
    i64.extend16_s
    i64.extend8_s
    call 0
    f32.convert_i64_s
    elem.drop 0
    f32.trunc
    i64.const 4286578688
    block (type 12) ;; label = @1
      ref.null 5
      memory.size
      i64.load32_s align=2
      i64.clz
      i64.eqz
      try_table (type 1) (result f32) (catch_all 1) (catch 0 1) (catch_all 1) (catch 0 0 (;@1;)) (catch 0 0 (;@1;)) (catch_all 1) (catch 0 1) (catch_all 1) ;; label = @2
        struct.new_default 41
        call 0
        struct.get_s 41 3
        i32.load16_u offset=54856476
        i64.load align=1
        f32.convert_i64_u
        return_call 0
        memory.size
        f64.const -nan:0xfffffffff7fff (;=NaN;)
        f64.trunc
        f64.ceil
        f64.ceil
        f64.ceil
        i64.trunc_f64_s
        i64.extend16_s
        i32.const -2033292482
        try_table (type 24) (result i32) (catch 0 2) (catch_all 1 (;@1;)) (catch_all 2) (catch 0 1 (;@1;)) (catch_all 1 (;@1;)) ;; label = @3
          f64.const -0x1p+1021 (;=-22471164185778950000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;)
          i32.trunc_sat_f64_s
          i64.const 8290532994681973644
          i32.wrap_i64
          i64.load32_u
          try_table (result i64) (catch 0 3) (catch_all 3) (catch 0 2 (;@1;)) (catch 0 2 (;@1;)) ;; label = @4
            loop (type 20) (result f64 nullfuncref f64 f64 f64) ;; label = @5
              call 0
              br 5
              loop (type 4) ;; label = @6
                memory.size
                i64.load align=2
                loop ;; label = @7
                  i64.const 0
                  unreachable
                end
                unreachable
              end
              unreachable
            end
            unreachable
          end
          unreachable
        end
        unreachable
      end
      unreachable
    end
    unreachable
  )
  (func (;1;) (type 37) (result f32 exnref)
    unreachable
  )
)
