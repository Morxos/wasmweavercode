(module
  (rec
    (type (;0;) (func (param nullexternref i64)))
    (type (;1;) (sub (struct (field (mut i16)) (field i32) (field i64) (field (mut i8)) (field i8) (field i16) (field i64) (field (mut i8)) (field i8) (field i64) (field f64))))
    (type (;2;) (struct (field i16) (field (mut i16)) (field i16) (field f32) (field i16) (field (mut f32)) (field (mut nullfuncref)) (field (mut i16)) (field (mut i8)) (field i8) (field (mut i8)) (field (mut i16)) (field (mut f32)) (field (mut i16))))
    (type (;3;) (struct (field i16) (field (mut f32)) (field (mut (ref null 0))) (field (mut f32)) (field i8) (field (mut i64)) (field (mut i8)) (field (mut i8)) (field (mut i8))))
    (type (;4;) (sub (struct (field (mut i32)) (field i16) (field i16) (field i16) (field (mut i16)) (field (mut f32)))))
    (type (;5;) (struct (field (mut anyref)) (field i16) (field (mut i16)) (field (mut f32)) (field (mut i16)) (field (mut i16)) (field i16) (field i32) (field (mut i16)) (field i8) (field i16) (field (mut f64)) (field (mut i64)) (field (mut i8)) (field (mut f32)) (field (mut i16)) (field (mut i16)) (field i8)))
    (type (;6;) (sub (struct)))
    (type (;7;) (sub (struct (field i8) (field i16) (field i16) (field i32) (field (mut i8)) (field (mut f32)) (field (mut i8)) (field (mut i32)))))
    (type (;8;) (sub (struct (field (mut i8)) (field anyref) (field (mut f32)) (field i16) (field i16) (field f64) (field (mut i8)) (field i16))))
    (type (;9;) (array (mut i32)))
    (type (;10;) (sub (array i64)))
    (type (;11;) (struct (field i8) (field i64) (field (mut i32)) (field i8) (field i16) (field (mut i8)) (field (mut i8)) (field i8) (field funcref) (field (mut i16)) (field nullfuncref) (field f64) (field (mut i8)) (field f64) (field (mut i64))))
    (type (;12;) (sub (struct (field (mut i16)) (field (mut i8)) (field i8) (field i8) (field i16) (field i16) (field i16) (field i16) (field arrayref))))
    (type (;13;) (array i32))
    (type (;14;) (struct (field i32) (field f64) (field i8) (field (mut i32)) (field i31ref) (field i8) (field (mut i8)) (field i8) (field (mut f32)) (field (mut nullref)) (field (mut i8)) (field (mut i8)) (field (mut i16)) (field (mut i8)) (field (mut i16)) (field (mut i8)) (field (mut i16)) (field i32)))
    (type (;15;) (sub (func (result i32))))
    (type (;16;) (sub (struct (field (mut i16)) (field i8) (field (mut i8)) (field (mut f64)) (field (mut i16)) (field (mut i16)) (field (mut f32)) (field (mut i8)) (field (mut f64)) (field i8) (field f64) (field (mut i8)) (field (mut i16)) (field i8) (field (mut i16)) (field (mut i8)) (field i16) (field (ref null 4)) (field i8))))
    (type (;17;) (sub (struct (field i8) (field (mut i16)))))
    (type (;18;) (sub (array (mut i8))))
    (type (;19;) (sub 8 (struct (field (mut i8)) (field (ref null 16)) (field (mut f32)) (field i16) (field i16) (field f64) (field (mut i8)) (field i16) (field i8) (field i16))))
    (type (;20;) (array i8))
    (type (;21;) (sub (func (param i32) (result i64))))
    (type (;22;) (sub (struct (field (mut i8)) (field i8) (field i16) (field i8) (field (mut f32)) (field i8) (field i8) (field (mut i64)) (field (mut i8)) (field i8) (field (mut i8)) (field i16) (field i8) (field (mut i64)) (field i16))))
    (type (;23;) (sub (array (mut i8))))
    (type (;24;) (struct (field f64) (field (mut i16)) (field i8) (field i16) (field (mut (ref null 1))) (field i16) (field (mut (ref null 19))) (field i16) (field (mut i64)) (field externref)))
    (type (;25;) (array i8))
    (type (;26;) (sub (func (result i64))))
    (type (;27;) (sub (array f32)))
    (type (;28;) (array i8))
    (type (;29;) (sub (array (mut i16))))
    (type (;30;) (sub (array i16)))
    (type (;31;) (sub (struct (field (mut i8)) (field i16) (field i8) (field i8) (field i32) (field (mut i8)) (field i32) (field i16) (field f32) (field (mut i64)) (field (mut i8)) (field f32) (field i8) (field i32) (field f32))))
    (type (;32;) (sub (array (mut f32))))
    (type (;33;) (array (mut f64)))
    (type (;34;) (array i8))
    (type (;35;) (sub (array i8)))
    (type (;36;) (func (param i32) (result f64 anyref f32)))
    (type (;37;) (sub (array (mut i8))))
    (type (;38;) (struct (field (mut i16)) (field (mut f64)) (field f64) (field (mut i8)) (field i16) (field i8) (field i64) (field i16) (field i16) (field (mut i8)) (field (ref null 5)) (field (mut i8)) (field i16) (field f32)))
    (type (;39;) (sub (struct)))
    (type (;40;) (struct (field i16) (field i16) (field (mut i31ref)) (field (mut i8)) (field i8) (field (mut i16)) (field (mut i64)) (field i8) (field (mut i8)) (field (mut i16)) (field i8) (field (mut i32)) (field (mut i8)) (field (mut i16)) (field (mut i16)) (field f64)))
  )
  (table (;0;) 8 anyref ref.null eq)
  (tag (;0;) (type 0) (param nullexternref i64))
  (tag (;1;) (type 0) (param nullexternref i64))
  (tag (;2;) (type 0) (param nullexternref i64))
  (export "\u{1}R\u{7}\u{c}" (table 0))
  (elem (;0;) declare exnref)
  (elem (;1;) declare arrayref)
  (func (;0;) (type 36) (param i32) (result f64 anyref f32)
    (local i32)
    loop (type 15) (result i32) ;; label = @1
      local.get 0
      if (type 26) (result i64) ;; label = @2
        nop
        try_table (result f64) (catch_all 1 (;@1;)) ;; label = @3
          elem.drop 1
          i64.const -1025
          block (result i32) ;; label = @4
            loop (type 26) (result i64) ;; label = @5
              loop (result f64) ;; label = @6
                elem.drop 1
                f32.const 0x1.01ed86p-81 (;=0.0000000000000000000000004167049;)
                f32.sqrt
                i64.trunc_sat_f32_s
                i64.eqz
                block (type 36) (param i32) (result f64 anyref f32) ;; label = @7
                  i32.extend16_s
                  table.size 0
                  i32.lt_s
                  i32.clz
                  nop
                  local.tee 0
                  br_table 1 (;@6;) 2 (;@5;) 6 (;@1;) 6 (;@1;)
                  br 6 (;@1;)
                  f32.const -0x1.bdb2ap-77 (;=-0.000000000000000000000011521017;)
                  i32.reinterpret_f32
                  f64.convert_i32_s
                  i64.reinterpret_f64
                  f32.convert_i64_s
                  try_table (catch_all 6 (;@1;)) (catch_all 6 (;@1;)) (catch_all 6 (;@1;)) (catch_all 2 (;@5;)) (catch_all 2 (;@5;)) (catch_all 1 (;@6;)) (catch_all 6 (;@1;)) (catch_all 1 (;@6;)) (catch_all 1 (;@6;)) ;; label = @8
                    loop (result i32) ;; label = @9
                      loop (type 26) (result i64) ;; label = @10
                        br 0 (;@10;)
                        i64.const 1229782938247303441
                        i64.const 9144500066690719481
                        br 4 (;@6;)
                        i64.xor
                        elem.drop 1
                        local.get 1
                        i32.popcnt
                        f64.const -0x1.920af92f135fdp+812 (;=-42893241996032975000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;)
                        f64.neg
                        i64.const 1125899906842624
                        i32.const -2048
                        f32.convert_i32_u
                        f32.sqrt
                        f32.trunc
                        table.size 0
                        if (type 26) (result i64) ;; label = @11
                          table.size 0
                          br 7 (;@4;)
                          try_table (result i32) (catch_all 2 (;@9;)) (catch_all 2 (;@9;)) (catch_all 5 (;@6;)) (catch_all 1 (;@10;)) (catch_all 1 (;@10;)) (catch_all 1 (;@10;)) (catch_all 1 (;@10;)) ;; label = @12
                            unreachable
                          end
                          unreachable
                        else
                          unreachable
                        end
                        unreachable
                      end
                      unreachable
                    end
                    unreachable
                  end
                  unreachable
                end
                unreachable
              end
              unreachable
            end
            unreachable
          end
          unreachable
        end
        unreachable
      else
        unreachable
      end
      unreachable
    end
    unreachable
  )
)
