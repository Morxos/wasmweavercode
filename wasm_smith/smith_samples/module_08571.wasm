(module
  (rec
    (type (;0;) (array (mut i8)))
    (type (;1;) (struct (field (mut i32))))
    (type (;2;) (array (mut i16)))
    (type (;3;) (array i64))
    (type (;4;) (sub (struct (field (mut i32)) (field (mut f64)) (field (mut i16)) (field i32) (field i16) (field i8) (field i8) (field i32) (field (mut i8)) (field i16) (field i16) (field i16))))
    (type (;5;) (sub (array (mut i8))))
    (type (;6;) (func))
    (type (;7;) (array i8))
    (type (;8;) (struct (field (mut i32)) (field (mut i8)) (field (mut i8)) (field (mut nullref)) (field funcref) (field (mut f32)) (field i32) (field i64)))
    (type (;9;) (sub (func (param i64) (result nullexternref f64 i32 structref f64 f64))))
    (type (;10;) (array i8))
    (type (;11;) (array f32))
    (type (;12;) (struct (field i16) (field i8) (field (mut i8)) (field i16) (field (mut f64)) (field i31ref) (field (mut i16)) (field (mut f32))))
    (type (;13;) (struct (field (mut i16)) (field (mut i8)) (field (mut i16)) (field i16) (field (mut externref)) (field (mut f32)) (field (mut i8)) (field (mut i16)) (field i32) (field (mut i8)) (field (mut i8)) (field (mut i8)) (field i16) (field (mut i64))))
    (type (;14;) (sub (func (result i32))))
    (type (;15;) (sub (struct (field i16) (field (mut i8)) (field (ref null 11)) (field (mut i8)) (field (mut i16)) (field i31ref) (field i8) (field i8) (field i8) (field i8) (field (mut i16)) (field (mut i8)) (field f32) (field f64))))
    (type (;16;) (struct (field (mut i8)) (field f64) (field (mut i16)) (field (mut i32)) (field (mut i8)) (field (mut i16)) (field f32) (field (mut i8)) (field (mut i16)) (field i32) (field i8) (field (mut i64)) (field (mut f64)) (field f64) (field i16) (field (mut (ref null 0))) (field i16)))
    (type (;17;) (struct (field i8) (field i16) (field i8) (field i8) (field f64) (field (mut i8)) (field (mut i16)) (field (mut i32)) (field i32) (field (mut i16)) (field i16) (field i16) (field i16)))
    (type (;18;) (sub (func (result f32 i64 i64))))
    (type (;19;) (sub (func (param (ref null 13)))))
    (type (;20;) (struct (field (mut i16)) (field (mut i16)) (field i32) (field (mut i8)) (field (mut f32)) (field (mut i16)) (field (mut i16)) (field (mut i8)) (field (mut i8)) (field (mut i16)) (field f32)))
    (type (;21;) (sub (func (param f64 i32) (result (ref null 20)))))
    (type (;22;) (sub (func (result f64 funcref i32))))
    (type (;23;) (sub (func)))
    (type (;24;) (func (param i64 f32 exnref) (result f64 f32 f32)))
    (type (;25;) (sub (func (param f64 arrayref))))
    (type (;26;) (array i16))
    (type (;27;) (struct (field f32) (field (mut i16)) (field (mut i8)) (field (mut i16)) (field (mut i64)) (field (mut i8)) (field i16) (field i8) (field (mut i16)) (field (mut i8)) (field i8) (field (mut i16)) (field (mut i16)) (field i8)))
    (type (;28;) (func (param (ref null 6) f64 i32 i32)))
    (type (;29;) (sub (struct (field i16) (field i16) (field i32) (field i32) (field i16) (field (mut i16)) (field (mut i64)) (field i16) (field i64))))
    (type (;30;) (struct (field (mut i8)) (field (mut i16)) (field (mut i16)) (field (mut i64)) (field f32) (field i16) (field i8) (field (mut i8)) (field f32) (field (mut f32)) (field (mut i8)) (field i32) (field i16) (field i16)))
    (type (;31;) (sub (array eqref)))
    (type (;32;) (sub (func)))
    (type (;33;) (sub (array i32)))
    (type (;34;) (sub (func (param i64) (result i64 i64))))
    (type (;35;) (sub (func (result i32 f64))))
    (type (;36;) (sub (struct (field (ref null 21)))))
    (type (;37;) (func (param i64)))
    (type (;38;) (func (param exnref i64) (result f64 (ref null 15) (ref null 31))))
    (type (;39;) (sub (array (mut i16))))
    (type (;40;) (func))
    (type (;41;) (sub (func (result i32 f32 i32 (ref null 35)))))
    (type (;42;) (array (mut f32)))
    (type (;43;) (sub (array i16)))
    (type (;44;) (sub (func (param (ref null 40)) (result externref (ref null 33) i64))))
    (type (;45;) (sub final 15 (struct (field i16) (field (mut i8)) (field nullref) (field (mut i8)) (field (mut i16)) (field i31ref) (field i8) (field i8) (field i8) (field i8) (field (mut i16)) (field (mut i8)) (field f32) (field f64) (field i32) (field (mut i8)) (field f64))))
    (type (;46;) (sub (func (param (ref null 40)))))
    (type (;47;) (sub (array i8)))
    (type (;48;) (struct (field (mut f64)) (field i16) (field (ref null 44)) (field (mut i16)) (field (mut i16)) (field (mut i16)) (field i8) (field (mut i16))))
    (type (;49;) (sub (array i16)))
    (type (;50;) (sub (array (mut exnref))))
    (type (;51;) (array i16))
  )
  (global (;0;) f32 f32.const -0x1.d0e4a4p-47 (;=-0.000000000000012903376;))
  (export "wT" (global 0))
  (export "\u{16}" (global 0))
  (elem (;0;) declare structref)
  (elem (;1;) (ref null 32) (ref.null 32) (ref.null nofunc) (ref.null 32) (ref.null 32) (ref.null 32) (ref.null 32))
  (elem (;2;) declare structref)
  (func (;0;) (type 37) (param i64)
    (local nullref i64)
    try_table (type 32) (catch_all 0) (catch_all 0) (catch_all 0) (catch_all 0) ;; label = @1
      try_table (type 41) (result i32 f32 i32 (ref null 35)) (catch_all 1) (catch_all 1) (catch_all 0 (;@1;)) (catch_all 1) (catch_all 1) (catch_all 0 (;@1;)) (catch_all 1) (catch_all 1) (catch_all 1) ;; label = @2
        br 2
        loop (type 22) (result f64 funcref i32) ;; label = @3
          local.get 0
          f64.convert_i64_s
          i64.reinterpret_f64
          i64.extend16_s
          local.get 1
          f64.const -nan:0xffffffffffff0 (;=NaN;)
          try_table (type 18) (result f32 i64 i64) (catch_all 3) (catch_all 2 (;@1;)) (catch_all 2 (;@1;)) ;; label = @4
            try_table (type 6) (catch_all 4) (catch_all 4) (catch_all 1 (;@3;)) (catch_all 4) ;; label = @5
              try_table (catch_all 0 (;@5;)) (catch_all 4 (;@1;)) (catch_all 0 (;@5;)) (catch_all 2 (;@3;)) (catch_all 5) (catch_all 5) ;; label = @6
                br 5 (;@1;)
                ref.null 30
                global.get 0
                f32.ceil
                ref.null 35
                f32.const 0x1.444542p+1 (;=2.5333636;)
                i64.trunc_f32_s
                f64.convert_i64_u
                i64.trunc_f64_u
                return_call 0
                loop (type 32) ;; label = @7
                  loop (type 41) (result i32 f32 i32 (ref null 35)) ;; label = @8
                    loop (type 32) ;; label = @9
                      f64.const -nan:0xfffffffff8000 (;=NaN;)
                      i64.trunc_f64_u
                      loop (type 35) (result i32 f64) ;; label = @10
                        global.get 0
                        array.new_fixed 11 0
                        array.len
                        i32.extend8_s
                        data.drop 0
                        block (type 14) (result i32) ;; label = @11
                          loop (type 23) ;; label = @12
                            i32.const 16777216
                            f32.convert_i32_s
                            f32.floor
                            f32.neg
                            i32.trunc_sat_f32_u
                            i64.extend_i32_s
                            f64.const 0x1.fffffffp-1046 (;=0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002652494734;)
                            global.get 0
                            i64.const 3456527718
                            unreachable
                          end
                          unreachable
                        end
                        unreachable
                      end
                      unreachable
                    end
                    unreachable
                  end
                  unreachable
                end
                unreachable
              end
            end
            unreachable
          end
          unreachable
        end
        unreachable
      end
      unreachable
    end
  )
  (data (;0;) "I")
)
