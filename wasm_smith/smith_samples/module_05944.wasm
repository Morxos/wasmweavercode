(module
  (rec
    (type (;0;) (sub (array f64)))
    (type (;1;) (array i8))
    (type (;2;) (array (mut i8)))
    (type (;3;) (func (param arrayref f32 eqref)))
    (type (;4;) (func (result f64 i32)))
    (type (;5;) (func (param i32)))
    (type (;6;) (struct (field (mut i16)) (field (mut i16)) (field i16) (field i8) (field i16) (field (mut i8)) (field (mut i16))))
    (type (;7;) (sub (func (result exnref))))
    (type (;8;) (func (param i32)))
    (type (;9;) (array i8))
    (type (;10;) (sub (struct (field (mut i8)) (field (mut f32)) (field (mut i64)))))
    (type (;11;) (sub 10 (struct (field (mut i8)) (field (mut f32)) (field (mut i64)) (field i8) (field (mut f32)))))
    (type (;12;) (sub (array (mut i16))))
    (type (;13;) (sub (array i16)))
    (type (;14;) (array i8))
    (type (;15;) (array (mut i8)))
    (type (;16;) (struct (field i16) (field (mut eqref))))
    (type (;17;) (array (mut i8)))
    (type (;18;) (struct (field (mut f64)) (field (mut i64))))
    (type (;19;) (struct (field f64) (field i16) (field (mut i8)) (field (mut i8)) (field i8)))
    (type (;20;) (func (result f32)))
    (type (;21;) (sub (struct (field (mut i8)) (field (mut i8)))))
    (type (;22;) (sub (struct (field i16) (field (mut i16)) (field f64) (field i8) (field (mut i16)) (field (mut i32)) (field i16) (field (mut f32)) (field i16) (field f32) (field i16) (field i8) (field i8) (field (mut i8)) (field (mut i16)) (field (mut i16)) (field i64) (field i16) (field i16) (field f64))))
    (type (;23;) (array i8))
    (type (;24;) (sub (func (result f32))))
    (type (;25;) (sub 0 (array f64)))
    (type (;26;) (func (param exnref) (result f64 f64)))
    (type (;27;) (struct (field i8) (field i8) (field i8) (field (mut i8)) (field (mut i8)) (field (mut i16)) (field i8) (field (mut i16)) (field (mut i16))))
    (type (;28;) (sub (func (param i32))))
    (type (;29;) (sub (func (param i32) (result f64 i64 i32))))
    (type (;30;) (struct (field f32) (field i16) (field (mut i16)) (field nullref) (field (mut i64)) (field i8) (field (mut nullexternref)) (field (mut i8)) (field i8) (field arrayref) (field i64) (field (mut i8)) (field i8) (field (mut f64))))
    (type (;31;) (sub (func)))
    (type (;32;) (func (param f32)))
    (type (;33;) (struct (field (mut f32)) (field i16) (field (mut i16)) (field i8) (field i8) (field i16) (field (mut i16)) (field i16) (field (mut f32)) (field i16) (field i32) (field (mut i16)) (field i8) (field i8)))
    (type (;34;) (sub (struct (field i16) (field (mut i8)))))
    (type (;35;) (sub (func (param i32 f64 i64 f64) (result f32 i64 (ref null 23) i32 i32))))
    (type (;36;) (struct (field (mut i8)) (field (mut i16)) (field (mut i8))))
    (type (;37;) (struct (field i64) (field i32) (field (mut i32)) (field i16) (field (mut i16)) (field (mut i32))))
    (type (;38;) (sub 12 (array (mut i16))))
    (type (;39;) (struct (field i8) (field i16) (field (mut i8)) (field (mut f32)) (field f32) (field i32) (field i32) (field structref) (field i16) (field i8) (field (mut i16)) (field (mut structref)) (field (mut i8)) (field arrayref) (field (mut i32)) (field (mut i16))))
    (type (;40;) (func (param f32 f64 f32 f64 i32 i64 f32)))
    (type (;41;) (sub (array i16)))
    (type (;42;) (sub (array i8)))
    (type (;43;) (sub (struct (field (mut f64)) (field (mut i16)) (field (mut f32)) (field (mut f64)) (field (mut i32)) (field (mut i16)) (field f64) (field (mut i16)) (field (mut i16)) (field i16) (field (mut i16)) (field (mut i8)))))
    (type (;44;) (array f32))
    (type (;45;) (sub (struct (field f64) (field (mut i64)) (field i32) (field i16) (field (mut i16)) (field (mut i8)) (field (mut i8)) (field (mut i8)) (field i8) (field i8) (field i16))))
    (type (;46;) (sub (func (result (ref null 3)))))
    (type (;47;) (struct (field (mut i8)) (field f32) (field i8) (field (mut i16)) (field (mut i8)) (field i16) (field (mut (ref null 35))) (field i64) (field i16) (field (mut f64)) (field i32) (field i16) (field (mut i16))))
    (type (;48;) (struct (field f32) (field i16) (field f32) (field f64) (field i64) (field (mut i8)) (field (mut i8)) (field i64) (field (mut f32)) (field f32) (field i16) (field (mut i16)) (field (mut i16)) (field i8) (field (mut i8))))
    (type (;49;) (array (mut i16)))
    (type (;50;) (sub (struct (field i8) (field i8) (field (mut f32)) (field i8) (field i8) (field (mut i8)) (field i32) (field (mut i16)) (field (mut i8)) (field i8) (field (mut i8)) (field (mut f32)) (field i64) (field i16) (field i8) (field (mut i8)) (field (mut i8)))))
  )
  (import "" "" (func (;0;) (type 5)))
  (memory (;0;) i64 135 217111820479288 shared)
  (tag (;0;) (type 5) (param i32))
  (export "[" (memory 0))
  (export "3" (func 2))
  (func (;1;) (type 5) (param i32)
    (local structref)
    loop (type 7) (result exnref) ;; label = @1
      memory.size
      i32.load8_s offset=3764584
      block (type 5) (param i32) ;; label = @2
        if ;; label = @3
          ref.null 50
          struct.get_u 50 10
          ref.i31
          br_on_null 2 (;@1;)
          f64.const 0x1.0dfff8p-1051 (;=0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043711747;)
          nop
          try_table (type 4) (result f64 i32) (catch_all 1 (;@2;)) ;; label = @4
            struct.new_default 36
            ref.as_non_null
            try_table (type 24) (result f32) (catch_all 4) (catch_all 2 (;@2;)) (catch_all 3 (;@1;)) (catch_all 4) (catch_all 1 (;@3;)) (catch_all 1 (;@3;)) ;; label = @5
              struct.new_default 37
              struct.get_s 37 4
              f32.convert_i32_u
              f32.ceil
              f64.const 0x1.p-1074 (;=0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005;)
              i32.trunc_f64_u
              i32.popcnt
              f32.const -0x1.33010ep-64 (;=-0.00000000000000000006501065;)
              f64.promote_f32
              ref.null extern
              br_on_null 2 (;@3;)
              ref.is_null
              nop
              f32.convert_i32_u
              f32.abs
              f32.floor
              i32.trunc_f32_s
              i32.clz
              i64.extend_i32_s
              i64.load16_s offset=7694379
              f64.reinterpret_i64
              f64.floor
              block (type 20) (result f32) ;; label = @6
                br 4 (;@2;)
                try_table (type 20) (result f32) (catch_all 4 (;@2;)) (catch_all 5 (;@1;)) (catch_all 6) (catch_all 4 (;@2;)) (catch_all 4 (;@2;)) (catch_all 6) (catch_all 6) (catch_all 6) (catch_all 4 (;@2;)) (catch_all 3 (;@3;)) ;; label = @7
                  try_table (type 31) (catch_all 6 (;@1;)) (catch_all 7) (catch_all 7) (catch_all 7) (catch_all 7) (catch_all 5 (;@2;)) (catch_all 5 (;@2;)) (catch_all 7) (catch_all 7) ;; label = @8
                    i64.const 8067500115274194201
                    i32.const 134217728
                    i64.extend_i32_s
                    i64.extend16_s
                    f32.load offset=2003675 align=2
                    f64.const 0x1.2c9p-1060 (;=0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009504;)
                    unreachable
                  end
                  unreachable
                end
              end
              unreachable
            end
            unreachable
          end
          unreachable
        end
      end
      unreachable
    end
    unreachable
  )
  (func (;2;) (type 40) (param f32 f64 f32 f64 i32 i64 f32))
)
