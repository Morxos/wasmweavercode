(module
  (rec
    (type (;0;) (sub (func (result i32 f64 f64))))
    (type (;1;) (sub (func (param i32 f32))))
    (type (;2;) (func (result i64 i64)))
    (type (;3;) (struct (field (mut i8)) (field (mut i64)) (field i16) (field (mut i16)) (field (mut i8)) (field i8) (field (mut i32)) (field i8) (field (mut i16)) (field (mut i8)) (field i8) (field f32) (field (mut i8)) (field i8) (field i16) (field i8) (field (mut f32))))
    (type (;4;) (array i16))
    (type (;5;) (func (param i32 i64)))
    (type (;6;) (sub (array (mut i8))))
    (type (;7;) (array arrayref))
    (type (;8;) (sub (array (ref null 5))))
    (type (;9;) (array (mut i8)))
    (type (;10;) (sub (array (mut i8))))
    (type (;11;) (struct (field (mut i8)) (field nullref) (field i8) (field i16) (field i8) (field (mut i8)) (field anyref) (field i8) (field (mut i16)) (field i8) (field i16) (field i16)))
    (type (;12;) (array i8))
    (type (;13;) (array i8))
    (type (;14;) (sub (array i16)))
    (type (;15;) (array (mut i8)))
    (type (;16;) (func))
    (type (;17;) (sub (func (param f32))))
    (type (;18;) (sub (struct (field (mut i8)) (field i16) (field i16) (field (mut f64)) (field i16) (field (mut i16)) (field (mut i64)) (field i16) (field (mut i8)) (field (mut i16)) (field (mut i16)) (field i8) (field i16) (field i8) (field i16) (field (mut i32)))))
    (type (;19;) (sub (struct (field i64) (field i32) (field (mut i16)) (field i8) (field (mut f64)) (field (mut i16)) (field (mut i16)) (field (mut i8)) (field i8) (field f32) (field (mut i32)) (field i64) (field i16) (field (mut i8)) (field externref) (field (mut i8)) (field i16) (field (mut i8)))))
    (type (;20;) (sub (struct)))
    (type (;21;) (sub (func (result (ref null 13) f32))))
    (type (;22;) (array i16))
    (type (;23;) (struct (field (mut i8)) (field (mut i16)) (field i32) (field (mut f64)) (field (mut i8)) (field (mut i16)) (field (mut i16)) (field i16)))
    (type (;24;) (sub (func (result f32 i32 i32 i32 f64))))
    (type (;25;) (func (param i64) (result i64)))
    (type (;26;) (struct (field i16) (field (mut i64)) (field (mut f32)) (field f32) (field (mut i16)) (field i64) (field (mut anyref)) (field f64) (field (mut (ref null 7))) (field i16) (field i16) (field i8) (field (mut i16)) (field (mut i8)) (field i16) (field (mut i8)) (field (mut i16)) (field i16)))
    (type (;27;) (sub (func (param i32 f32))))
    (type (;28;) (array (mut i8)))
    (type (;29;) (sub (func (param i31ref))))
    (type (;30;) (array i16))
    (type (;31;) (sub (struct (field (mut i16)) (field i64) (field (mut i16)) (field (mut i16)) (field i8) (field i16))))
    (type (;32;) (func (result f32 (ref null 31))))
    (type (;33;) (sub (func)))
    (type (;34;) (sub (array i16)))
  )
  (import "" "" (global (;0;) i32))
  (import "(*" "" (tag (;0;) (type 1) (param i32 f32)))
  (import "" "" (table (;0;) 0 (ref null 7)))
  (import "" "" (global (;1;) (mut f32)))
  (memory (;0;) 0 31595 shared)
  (global (;2;) (mut i64) i64.const -9120706593874886671 i64.const -3244489919889694622 i64.const 5741122090023941524 i64.const 3852418485718593227 i64.const 1557054668139322863 i64.const -3957135565093486900 i64.const 8644478216251897304 i64.const -1746270904621079840 i64.const 7852216132939741993 i64.const 6471800517685999826 i64.mul i64.mul i64.sub i64.mul i64.add i64.const 6856008895256776424 i64.sub i64.mul i64.sub i64.add i64.mul)
  (elem (;0;) (table 0) (i32.const 0) nullref)
  (elem (;1;) (table 0) (global.get 0) (ref null 7) (ref.null none))
  (func (;0;) (type 29) (param i31ref)
    (local i64 i32 (ref null 17))
    table.size 0
    local.set 2
    block (type 32) (result f32 (ref null 31)) ;; label = @1
      struct.new_default 20
      i32.const 268435455
      if (result f64) ;; label = @2
        nop
        elem.drop 0
        local.get 1
        i32.const -1013943494
        f32.convert_i32_u
        f32.trunc
        i64.trunc_f32_u
        f64.const 0x1.ffffffff8p-1041 (;=0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000084879831634;)
        i64.trunc_f64_u
        i64.le_s
        table.get 0
        loop (type 32) (result f32 (ref null 31)) ;; label = @3
          local.get 2
          global.get 1
          global.set 1
          f64.convert_i32_s
          i32.trunc_f64_s
          ref.null exn
          loop (type 21) (result (ref null 13) f32) ;; label = @4
            i64.const -8369814014085138346
            block (type 21) (result (ref null 13) f32) ;; label = @5
              struct.new 20
              ref.cast (ref 20)
              i32.const 262144
              block (type 2) (result i64 i64) ;; label = @6
                br 3 (;@3;)
                local.get 1
                local.get 1
                i64.or
                f64.const 0x1.47313618583e5p+278 (;=620728681888897800000000000000000000000000000000000000000000000000000000000000000000;)
                i64.trunc_sat_f64_u
                i32.const 2048
                i32.ctz
                i32.clz
                i64.load16_s
                i64.eq
                memory.grow
                br 3 (;@3;)
                loop (type 33) ;; label = @7
                  table.size 0
                  i32.clz
                  global.get 1
                  i32.trunc_sat_f32_s
                  i32.add
                  block (type 24) (result f32 i32 i32 i32 f64) ;; label = @8
                    struct.new 20
                    ref.cast (ref none)
                    struct.new_default 18
                    local.get 1
                    nop
                    local.tee 1
                    ref.null nofunc
                    ref.is_null
                    ref.i31
                    try_table (type 16) (catch_all 5 (;@3;)) ;; label = @9
                      try_table (type 0) (result i32 f64 f64) (catch_all 2 (;@7;)) (catch_all 0 (;@9;)) (catch_all 0 (;@9;)) (catch_all 5 (;@4;)) (catch_all 0 (;@9;)) (catch_all 9) ;; label = @10
                        elem.drop 0
                        f64.const 0x1.ee10b8e38f1e6p+443 (;=43836158174527100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;)
                        struct.new 20
                        table.size 0
                        table.size 0
                        local.tee 2
                        i32.gt_s
                        f32.convert_i32_u
                        struct.new 20
                        f64.const 0x1.p-1028 (;=0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034766779039175;)
                        i64.const -8206115226763379577
                        i64.extend8_s
                        elem.drop 1
                        try_table (type 16) (catch_all 10) (catch_all 7 (;@3;)) (catch_all 10) (catch_all 7 (;@3;)) (catch_all 6 (;@4;)) (catch_all 3 (;@7;)) ;; label = @11
                          f64.const -0x1.01644b25f0e5dp+816 (;=-439370764391511800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;)
                          i32.trunc_f64_u
                          memory.size
                          i32.and
                          if (type 2) (result i64 i64) ;; label = @12
                            global.get 1
                            global.set 1
                            struct.new_default 18
                            struct.new_default 20
                            struct.new_default 26
                            nop
                            unreachable
                          else
                            unreachable
                          end
                          unreachable
                        end
                        unreachable
                      end
                      unreachable
                    end
                    unreachable
                  end
                  unreachable
                end
                unreachable
              end
              unreachable
            end
            unreachable
          end
          unreachable
        end
        unreachable
      else
        unreachable
      end
      unreachable
    end
    unreachable
  )
)
