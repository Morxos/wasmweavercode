(module
  (rec
    (type (;0;) (struct (field (mut i16)) (field (mut f32)) (field (mut arrayref)) (field i16) (field i32) (field i8) (field i32) (field (mut i64)) (field (mut i8)) (field (mut i16)) (field (mut exnref)) (field (mut i16)) (field (mut i32)) (field (mut i8)) (field funcref) (field i8) (field i32) (field i8)))
    (type (;1;) (array i16))
    (type (;2;) (func))
    (type (;3;) (array i16))
    (type (;4;) (sub (struct (field (mut i8)) (field (mut i8)) (field (mut i16)) (field f32) (field (mut i8)) (field i8))))
    (type (;5;) (struct (field i32) (field f32) (field i8) (field (mut i8)) (field i16) (field (mut i8)) (field i16) (field (mut i64))))
    (type (;6;) (sub (array i8)))
    (type (;7;) (array i8))
    (type (;8;) (sub (func)))
    (type (;9;) (struct (field (mut i16)) (field f32)))
    (type (;10;) (sub (func (param f64))))
    (type (;11;) (sub (array (mut i16))))
    (type (;12;) (func (result arrayref)))
    (type (;13;) (struct (field i16) (field (mut i16)) (field (mut i8)) (field (mut i16)) (field (mut i8)) (field i32) (field (mut f64)) (field i64) (field (mut i8)) (field i8) (field i16) (field i16) (field f64)))
    (type (;14;) (sub (array (mut i8))))
    (type (;15;) (func (result i64)))
    (type (;16;) (array i8))
    (type (;17;) (func (result i32)))
    (type (;18;) (sub (array i64)))
    (type (;19;) (sub (array (mut i16))))
    (type (;20;) (struct (field (mut i32)) (field (mut i32)) (field (mut i8))))
    (type (;21;) (sub (array (mut i8))))
    (type (;22;) (sub (func (result f64))))
    (type (;23;) (func (param f64 funcref i64 f64 (ref null 6) i32 i32 f64 f32 i32)))
    (type (;24;) (sub (array (mut i8))))
    (type (;25;) (sub (func (result exnref))))
    (type (;26;) (array (mut structref)))
    (type (;27;) (sub (func (param f64 (ref null 18)))))
    (type (;28;) (sub (array (mut i32))))
    (type (;29;) (sub (struct (field (mut i8)))))
    (type (;30;) (struct (field i8) (field (mut i8)) (field i16) (field (mut i16)) (field (mut f32)) (field (mut f32)) (field structref) (field i64) (field i8) (field i8)))
    (type (;31;) (sub (struct)))
    (type (;32;) (sub (array (mut f64))))
    (type (;33;) (array (mut i16)))
    (type (;34;) (sub (func (param f64 i31ref i32) (result (ref null 27)))))
    (type (;35;) (func (result f64)))
    (type (;36;) (func (result anyref i32)))
    (type (;37;) (sub (array (mut i8))))
    (type (;38;) (array i16))
    (type (;39;) (sub 27 (func (param f64 arrayref))))
    (type (;40;) (func (result i64)))
    (type (;41;) (sub (array i16)))
    (type (;42;) (sub (array i16)))
    (type (;43;) (struct (field (mut i8)) (field (mut i64)) (field i64) (field i16) (field (mut i16)) (field i16) (field (mut (ref null 10))) (field i16) (field (mut i8)) (field f64) (field i16) (field i8) (field i16) (field i16) (field i8) (field i8) (field (mut f64)) (field (mut arrayref)) (field f64)))
    (type (;44;) (sub (func)))
    (type (;45;) (sub (array (mut i16))))
    (type (;46;) (sub (func (result i32))))
    (type (;47;) (sub (func)))
    (type (;48;) (sub (array i8)))
    (type (;49;) (sub (array f64)))
    (type (;50;) (sub (struct (field f32) (field f64) (field i16) (field (mut f64)) (field (mut i8)) (field (mut i8)) (field (mut f64)) (field i16) (field (mut i32)) (field (mut i16)) (field f64) (field (mut i64)) (field i8) (field i16) (field (mut i8)) (field i16) (field (mut i8)))))
  )
  (global (;0;) f32 f32.const -0x1.efac52p+82 (;=-9363000600000000000000000;))
  (export "bD" (func 0))
  (export "\u{e}\u{29d}" (global 0))
  (export "" (global 0))
  (export "3" (global 0))
  (export "4" (func 0))
  (export "8" (global 0))
  (export "t" (func 0))
  (export "7" (global 0))
  (func (;0;) (type 25) (result exnref)
    return_call 0
    f64.const -nan:0xfffffbfffffff (;=NaN;)
    i64.trunc_sat_f64_s
    f64.convert_i64_u
    try_table (type 46) (result i32) (catch_all_ref 0) (catch_all_ref 0) (catch_all_ref 0) (catch_all_ref 0) (catch_all_ref 0) (catch_all_ref 0) (catch_all_ref 0) (catch_all_ref 0) ;; label = @1
      ref.null 2
      ref.null extern
      call 0
      f32.const -0x1.109374p-95 (;=-0.000000000000000000000000000026878068;)
      i32.trunc_f32_u
      i32.clz
      return_call 0
      f64.const -0x1.aaadb124a0b23p+199 (;=-1339152126933910100000000000000000000000000000000000000000000;)
      f64.neg
      f64.trunc
      i64.const -8156109256710743716
      f64.convert_i64_u
      f64.max
      i32.trunc_sat_f64_s
      i32.ctz
      f32.convert_i32_u
      ref.null 0
      i64.const -1025
      f32.convert_i64_s
      i64.trunc_sat_f32_s
      i64.extend8_s
      call 0
      ref.cast exnref
      struct.new 31
      array.new_fixed 26 0
      struct.new_default 9
      ref.eq
      struct.new 31
      ref.test (ref 31)
      f64.convert_i32_u
      struct.new_default 9
      call 0
      ref.test exnref
      f32.convert_i32_s
      f32.const -0x1.1f188ep-34 (;=-0.000000000065278054;)
      f32.eq
      struct.set 9 0
      f64.const 0x1.fff8p-1061 (;=0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080943;)
      f64.const 0x1.51edc9922a3d8p-996 (;=0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001971104424128824;)
      f64.abs
      f64.trunc
      ref.null 40
      block (type 2) ;; label = @2
        loop (type 25) (result exnref) ;; label = @3
          f32.const 0x1.1b196ep+99 (;=700920000000000000000000000000;)
          i64.trunc_sat_f32_s
          i64.const -4294967297
          i64.rem_s
          block (type 46) (result i32) ;; label = @4
            global.get 0
            loop (type 40) (result i64) ;; label = @5
              try_table (type 25) (result exnref) (catch_all 3 (;@2;)) (catch_all 0 (;@5;)) (catch_all 0 (;@5;)) (catch_all_ref 5) (catch_all_ref 5) (catch_all 2 (;@3;)) (catch_all_ref 5) (catch_all 2 (;@3;)) (catch_all 0 (;@5;)) ;; label = @6
                block (type 2) ;; label = @7
                  i32.const 2074319299
                  f32.convert_i32_s
                  f32.floor
                  struct.new 31
                  global.get 0
                  i32.trunc_sat_f32_u
                  f64.convert_i32_u
                  f32.demote_f64
                  block (type 8) ;; label = @8
                    f32.const 0x1.cad9a8p+101 (;=4544232500000000000000000000000;)
                    global.get 0
                    f32.const -nan:0x5fffff (;=NaN;)
                    f32.le
                    f32.const 0x1.p-132 (;=0.000000000000000000000000000000000000000183671;)
                    f32.const 0x1.fcp-143 (;=0.000000000000000000000000000000000000000000178;)
                    i64.trunc_sat_f32_s
                    br 3 (;@5;)
                    f32.convert_i64_s
                    call 0
                    f32.const -nan:0x3fffff (;=NaN;)
                    i64.trunc_f32_u
                    i64.extend16_s
                    struct.new 31
                    extern.convert_any
                    ref.test (ref noextern)
                    i32.extend8_s
                    try_table (type 17) (result i32) (catch_all 6 (;@2;)) (catch_all_ref 8) (catch_all_ref 2 (;@6;)) (catch_all 3 (;@5;)) (catch_all 3 (;@5;)) (catch_all 0 (;@8;)) (catch_all 6 (;@2;)) (catch_all 6 (;@2;)) (catch_all_ref 8) (catch_all 5 (;@3;)) ;; label = @9
                      br 2 (;@7;)
                      f32.const 0x1.f271fep+117 (;=323509480000000000000000000000000000;)
                      f32.trunc
                      block (type 15) (result i64) ;; label = @10
                        loop ;; label = @11
                          block ;; label = @12
                          end
                        end
                        unreachable
                      end
                      unreachable
                    end
                    unreachable
                  end
                  unreachable
                end
                unreachable
              end
              unreachable
            end
            unreachable
          end
          unreachable
        end
        unreachable
      end
      unreachable
    end
    unreachable
  )
)
